buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        maven { url = 'https://repo.spongepowered.org/maven' }
        jcenter()
        mavenCentral()
    }
    
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'org.spongepowered.mixin'

mixin {
    add sourceSets.main, modId+".refmap.json"
}


version = modMinecraftVersion + "-" +modVersion
group = modGroup // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = modFilename

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
println('Mod Name: ' + modFilename + ', Mod Version: ' + modVersion + ', Minecraft Version: ' + modMinecraftVersion + ', Forge Version: ' + modForgeVersion)


repositories {
    maven {url = "https://repo.spongepowered.org/maven"} // mixin
}

minecraft {
    mappings channel: mappingsChannel, version: mappingsVersion
    //makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    runs {
        client {
            workingDirectory project.file('run/client')

            // Recommended logging data for a userdev environment
            // The markers can be changed as needed. 
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.disableRefMap', 'true'
			
			args '--username', 'CodeHexIO', '--uuid', 'c5751ce1d50e4d47ca120e1ea1c75542'
			arg "-mixin.config="+modId+".mixins.json"

            mods {
                modId {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run/server')

            // Recommended logging data for a userdev environment
            // The markers can be changed as needed. 
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'
            property 'mixin.env.disableRefMap', 'true'
            arg "-mixin.config="+modId+".mixins.json"

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                modId {
                    source sourceSets.main
                }
            }
        }
    }
}

dependencies {
	minecraft 'net.minecraftforge:forge:' + modMinecraftVersion + '-' + modForgeVersion
	compile 'org.spongepowered:mixin:0.8'
    // You may put jars on which you depend on in ./libs or you may define them like so..
    // compile "some.group:artifact:version:classifier"
    // compile "some.group:artifact:version"\
	compile fileTree(include: ['*.jar'], dir: 'libs')

    // Real examples
    // compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    // compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // The 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    // provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // These dependencies get remapped to your current MCP mappings
    // deobf 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

}
// Process resources on build
processResources {
	// This will ensure that this task is redone when the versions change.
	inputs.property 'version', modVersion
	
	// Replace stuff in mods.toml, nothing else
	from(sourceSets.main.resources.srcDirs) {
		include 'META-INF/mods.toml'
		
		// Replace version
		expand 'version': modVersion
	}
	// Copy everything else except the mods.toml
	from(sourceSets.main.resources.srcDirs) {
		exclude 'META-INF/mods.toml'
	}
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Specification-Title": modFilename,
            "Specification-Vendor": "Stereowalker",
            "Specification-Version": modVersion, // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": modVersion,
            "Implementation-Vendor" :"Stereowalker",
            "MixinConfigs": modId+".mixins.json",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

task deobfJar(type: Jar) {
	from sourceSets.main.output
	classifier = "deobf"
}

// Example configuration to allow publishing using the maven-publish task
// we define a custom artifact that is sourced from the reobfJar output task
// and then declare that to be published
// Note you'll need to add a repository here
//def reobfFile = file("$buildDir/reobfJar/output.jar")
//def reobfArtifact = artifacts.add('default', reobfFile) {
//    type 'jar'
//    builtBy 'reobfJar'
//}
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
			artifact deobfJar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

artifacts {
	archives deobfJar
}